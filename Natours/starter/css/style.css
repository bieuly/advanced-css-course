/* Resets all browser specific margin and padding */
/* star selector selects all elements */
*,
*:after,
*:before {
  margin: 0;
  padding: 0;
  /* Inherits from body. Allows All elements to have box-szing */
  box-sizing: inherit; }

html {
  /* Setting font-size to be 10px will make it easy to calculate rem units for everything else */
  /* font-size: 10px; */
  /* Since browser font size is usually 16px and we effectively want font-size to be 10px. 62.5% of 16px will give us 10px*/
  font-size: 62.5%; }

body {
  /* Border-box will include padding and border into calculation of width and height of elements */
  box-sizing: border-box; }

@keyframes fadeIn {
  from {
    opacity: 0; }
  to {
    opacity: 1; } }

/* Defines an animation called moveInLeft. */
@keyframes moveInLeft {
  /* Starting frame */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translate(1rem); }
  /* Ending frame */
  100% {
    opacity: 1;
    transform: translate(0); } }

/* Can also use "from" and "to" to refer to 0% and 100% */
@keyframes moveInRight {
  from {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translate(-1rem); }
  to {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

body {
  /* Lato is referenced in the html doc as a link. sans-serif is backup */
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* Convert all px units to rem */
  /* font-size: 16px;
    padding: 30px; */
  font-size: 1.6rem;
  padding: 3rem;
  color: #777;
  line-height: 1.7; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* Backface-visiblity defines if the backside of a transformed element is visible */
  /* Doesn't seem like I need it for the effect */
  /* backface-visibility: hidden; */ }
  .heading-primary--main {
    /* Will treat the span as a block. So it will start on a new line */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* This can be shorthanded to: animation: moveInLeft 2s ease-out */
    /* Refers to the name of the keyframes animation you want to use */
    animation-name: moveInLeft;
    /* How long the animation will last for */
    animation-duration: 2s;
    /* Defines the where the speed ramp is for the animation */
    /* Ease out will slow down towards the end of the animation */
    animation-timing-function: ease-out; }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 2s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  display: inline-block;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(10deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.u-margin-bottom-huge {
  margin-bottom: 10rem; }

.btn {
  /* These are psuedo classes. */
  /* Psuedo classes are different states of an element. */
  /* :link is unvisited links */
  /* :visited is visited links */
  /* :hover is on hover */
  /* :active is when mouse is clicked on it */
  /* These pseudo classes must be applied in this order */
  /* This is a pseudo element. */
  /* Pseudo elements appear inside the element's innerHTML or content on the DOM */
  /* The idea here is to create an element behind the button of the same size. So that we can manipulate it for cool effects */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* Inline elements normally do not allow for setting width, height, padding, margins. This inline-block allows it */
    /* Inline-block will not start a new line like a block element will */
    display: inline-block;
    /* Padding can be set because display is inline-block (since this is <a> is an inline element) */
    padding: 1.5rem 4rem;
    border-radius: 5rem;
    /* Transition will smoothly animate values that will change. Changes can be triggered by psuedo classes :hover, :active , etc*/
    /* This is saying: "For all CSS properties, smoothly animate the values within .2 seconds" */
    /* This needs to be applied to the "initial state" */
    transition: all 0.2s;
    position: relative;
    /* You can specify specically which value to smoothly animate like this: */
    /*  transition: transform .2s;  <- This is saying "for only the transform value, smoothly animate it within .2 seconds" */ }
  .btn:hover {
    transform: translateY(-0.3rem);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    /* CONFUSING! */
    /* Order is <class>:<pseudo class>::<pseudo element> */
    /* This is saying "I want to select the ::after element of .btn when it is hover state */ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* This will make it fade out. */
      /* The actual fading is done by the transition property on the pseudo element */
      opacity: 0; }
  .btn:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn--green {
    background-color: #55c57a;
    color: #fff; }
    .btn--green::after {
      background-color: #55c57a; }
  .btn::after {
    /* Need to specify content property for pseudo elements to be displayed */
    content: "";
    background-color: #fff;
    /* Don't need this. This is inherited from .btn */
    /* display: inline-block; */
    /* Height and width are all relative to the original element */
    /* Setting height and width to 100% will make it the same size as .btn */
    height: 100%;
    width: 100%;
    border-radius: 5rem;
    /* Since this pseudo element will appear inside the .btn it will appear as if we added more content to the .btn */
    /* Instead we need this pseudo element to be in the exact same position as .btn hence position: absolute; top: 0; left: 0; */
    position: absolute;
    top: 0;
    left: 0;
    /* Will ensure that this psuedo element is behind the .btn */
    z-index: -1;
    transition: all 0.3s; }
  .btn--animated {
    /* .75s is delay. So this animation will happen after .75s has passed since loading */
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* Animation fill mode: Configures what values are applied by the animation before and after it is executing. */
    /* Backwards will apply the first keyframe styles before animation starts  */
    /* If this is not applied, then the button will be visible, then dissapear for the animation. We want to button to start invisible. */
    /* CONFUSING! Not sure why this is not needed for the spans in the <h1> */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  text-decoration: none;
  display: inline-block;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0); }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all .2s;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-1rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.9); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: all 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.card {
  perspective: 150rem;
  position: relative;
  height: 50rem; }
  .card__side {
    height: 52rem;
    transition: all 0.7s ease;
    color: white;
    font-size: 2rem;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    overflow: hidden; }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture-1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture-2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture-3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    color: white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
    text-align: right; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 185, 0, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(126, 213, 111, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(41, 152, 255, 0.85)); }
  .card__details {
    color: #777;
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    text-align: center;
    margin-bottom: 8rem;
    color: white; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 100; }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /* Ensures that the background completely covers the element even if it has to cut or stretch */
  background-size: cover;
  /* Will not crop from the top of background when re-sizing. Will crop from all other sides */
  background-position: top;
  /* Clip path specifices visible region of element*/
  /* Polygon specifies all vertices. Percents are relative to original sizing of element. It is specifying 4 verices here*/
  /* Vertices are x y */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Position relative can be understood as an anchor or reference point for children who have position absolute */
  position: relative; }
  .header__logo-box {
    /* Position absolute will start positioning from the nearest element whose position is relative. */
    /* In this case, .logo-box is positioned relative to .header */
    position: absolute;
    top: 4rem;
    left: 4rem;
    animation: fadeIn .5s ease-out; }
  .header__logo {
    /* Only need to specify 1 size dimension for imgs. Browser will calculate the other diemension. */
    height: 3.5rem; }
  .header__text-box {
    /* Position is relative to .header */
    position: absolute;
    /* Top and left here will position the top left corner of the element right at the middle of the screen */
    top: 40%;
    left: 50%;
    /* Trick to center element. -50% is relative to the element itself. This is to compensate for the positioning */
    transform: translate(-50%, -50%);
    /* Centers all text inside .text-box (including text inside h1, a, etc tags) */
    text-align: center; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc((2 * (100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc((2 * (100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc((3 * (100% - 3 * 6rem) / 4) + 2 * 6rem); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/nat-4.jpg");
  background-size: cover;
  transform: skewY(-7deg);
  margin-top: -10rem; }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -10rem;
  text-align: center; }

/* Section 3 Notes */
/* 

===== HOW ARE UNITS CONVERTED TO FINAL VALUE? ===== 

All calculations will result in a final px (percentages and relative units are always caluclated to px)
- % (fonts) = x% * (parent's font-size)
- % (distance) = x% (parent's computed width/height)
- em (fonts) = x * (parent's computed font size)
    - 3em = 3 * (parent's computed font size)
- em (distance) = x * (current element's font size)
- rem = x * (root computed font size)
- vh = x percent * viewport height
- vw = x percent * viewport width

- Browsers specify root font-size (user agent): 16px

- Properties related to text are all inherited (ie. font-size, line-height, etc)
- When a property is inherited. It gets the computed value of it's parent element
- If there is no cascaded value (declared value), it checks if it is inherited, if it is not inherited, it takes the default value

=====  USING REM INSTEAD OF PX ===== 

- Note: REM is not supported for older IE browsers. Use this method with caution

- It is good practice to always use rem units instead of px. This is to allow for things to scale up and down based on the root font-size instead of hard coding in pixels
- Using rem units instead of px will preserve spacing ratios between elements

===== POSITIONING ===== 

- Relative:
    - Considered "normal flow"
    - Elements are layed out in natural order according to code

- Floats:
    - Will take element out of normal flow and move it as far as possible towards parent container
    - Will stack on other floated elements
    - Will cause other elements to wrap around floated elements
    - Container will not adjust it's height to the element. This can be fixed with "clear fixes"

- Absolute:
    - Will take element out of normal flow and position it relative the nearest parent that is not statically positioned (ie. relative, absolute)
    - No impact on surrounding content or elements
    - Can overlap with surrounding elements

===== BEM ===== 

Block-Element-Modififer Notation

- BEM is a way to structure and build CSS classes in a composable way (component based)
- The notation is defined as follows:

<block>__<element>--<modifier>

- Block: standalone component that is meaningful on it's own
- Element: part of a block that has no standalone meaning
- Modifier: a different version of a block or element


===== SECTION 4 - SASS INTRO ===== 

- Sass is a CSS Pre-processor
    - Meaning that Sass is built on top of CSS that adds more features (ie. nesting, variables, functions)
    - To start using SASS (.scss files) we first need to configure it, and have it compile it down to CSS

Note: There is a different between SCSS and SASS. They're essentially the same thing with different syntaxes. SCSS is more similar to CSS and so converting it back to CSS visually is easier.

- SCSS allows us to use // for comments


Variables:
    - Define variable with $
        $variableName: #00000

Nesting:

    Before SCSS:

    .navigation li {
        ...
    }

    With SCSS:

    .navigation {
        li {
            ...
        }
    }

- & means the selector at this current point 

    .navigation {
        li {
            &:hover {
                // & refers to .navigation li
            }
        }
    }

- You can also use & literally as it will literally translate to the current selector

.btn {
    &--white {
        // This will translate to .btn--white, so you can move all the code in .btn--white in here
    }
}

.btn--white {

}



Mixins:
- Use mixins when you notice repeatable code
- a re-usable block of code
- kind of like a multi line variable

@mixin <mixin name> {
    <mixin content>
}

.example {
    @include <mixin name>
}

ie). Mixin for clear fixes

@mixin clearFix {
    &::after {
        content: "";
        clear: both;
        display: table;
    }
}

.example {
    @include clearFix; 
}

- Mixins can alo take in arguments

@mixin <mixin name>($<mixin arg name>) {
    text-decoration: none;
    color: $<mixin arg name>
}

==== Aside: Floats and clear fixes: ====

- elements that float do not naturally contribute to their containers height. To fix this issue, people use "clear fixes"

To make the container of floated elements have height to fit the content, you need to do the following to the container element:

.container::after {
    content: "";
    clear: both;
    display: table;
}

- This is a good candidate to be a mixin because this can be re-used in many unrelated containers

========================================


Functions:
- Functions can take in arguments and return a value

@function <function name>($arg, $arg2) {
    @return $arg, $arg2;
}


Extends;
- Very similar to mixins. As they have the ability to get rid of repeatable code.
- Allows you to extend css rules
- Use when pieces of code are "inherently or thematically" related (ie. all buttons, etc)

%<extendable name> {
    <extendable content>
}

.example {
    .li {
        @extend %<extendable name>;
    }
}

- NOTE: Extends and mixins will normally have no difference functionally. However the diffrence is in how they are compiled down to CSS.
- When you write @extend %<extendable name>; It is grabbing the current selector at that level and applying that selector to the set of rules defined in the extendable.
- When you write @include <mixin name>; you are simply copying the piece of mixin code into that selector


==== Installing SASS ====

- Install npm package: node-sass --save-dev

==== Compiling SASS to CSS ====

- Run node-sass script:
    node-sass <input file> <output file>
- Add -w flag to watch for scss changes
    node-sass <input file> <output file> -w
- Install live server (or use VSCode extension) to hot reload for file changes
    npm i live-server -g
- Run live server on root of project


===== Folder Structure =====
- We want to split related scss into different files

/abstracts : for anything that doesn't output CSS (ie. functions, mixins, variables)
/base : anything that is used across the entire website (ie. resets, typography, animations)
/components : re-usable standalone indenpendent pieces of code
/layoug : anything that has to do with page layout

main.scss : imports all files from above directories

===== Centering a block element inside another block element trick ====

set margin: 0 auto;

This will make top and bottom margins 0
Setting the left and right margins to auto will cause the browser to auto-matically fill all the possible space with margin with the same value for both. Hence centering it.


*/
