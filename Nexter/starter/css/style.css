html {
  box-sizing: border-box;
  font-size: 62.5%; }

*,
*::after,
*::before {
  padding: 0;
  margin: 0;
  box-sizing: inherit; }

body {
  font-family: "Nunito", sans-serif;
  color: #6D5D4B;
  font-weight: 300;
  line-height: 1.6; }

.container {
  display: grid;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; }
  .container > * {
    padding: 40px;
    font-size: 3rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1; }

.header {
  background-color: #54483A;
  grid-column: full-start / col-end 6; }

.realtors {
  background-color: #101d2c;
  grid-column: col-start 7 / full-end; }

.features {
  background-color: #aaa;
  grid-column: center-start / center-end; }

.story__pictures {
  background-color: #c69963;
  grid-column: full-start / col-end 4; }

.story__content {
  background-color: #f9f7f6;
  grid-column: col-start 5 / full-end; }

.homes {
  background-color: #101d2c;
  grid-column: center-start / center-end; }

.gallery {
  background-color: #54483A;
  grid-column: full-start / full-end; }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end; }

/*

 =============================== CREATING A GRID ===============================

- The following will create a 3x3 grid

 .container {
    display: grid;

    grid-template-rows: repeat(3, 1fr)

    grid-template-columns: repeat (3, 1fr)

    column-gap: 10px;

    row-gap: 10px;

    grid-grap: 10px;
}

fr units:
    - similar to flex-grow/flex-shrink
    - will split the remaining space 

This will split the grid in 4 (1+2+1) sections.
The second row will take up 2 of the 4 sections of the grid because it is 2fr.

        grid-template-rows: 1fr 2fr 1fr

You can also use absolute units:

        grid-template-rows: 100px 200px 100px;

Or you can mix and match:

        grid-template-rows: 1fr 200px 1fr;
            - In this case the fr units will divide the remaining space excluding the 200px

You can also use min-content, max-content, minmax() to define how the rows or columns adjust their width based on their content

    - min-content: the smallest width of a box where the box's contents don't overflow the box itself.
    - max-content: take full advantage of available width
    - minmax: will gurantee that the width stays between the 2 provided values

        grid-template-rows: min-content 1fr 1fr max-content minmax(100px, 500px);

*Note: The grid algorithm will sometimes create 'holes' or empty spaces as it tries to keep the order of the items.
To avoid these 'holes' you can use the "dense" property like this:

    grid-auto-flow: row dense;

 
=============================== POSITIONING ITEMS IN A GRID ===============================

.container {
    display: grid;
    grid-template-rows: repeat(3, 1fr)
    grid-template-columns: repeat (3, 1fr)
}

- This grid created by the code above will have row and column 'lines' numbered 1 - 4
- Even though this is a '3x3' grid. When you position an element inside the grid, you refer to these lines (in this case 1-4)

    1           2           3           4
1   -------------------------------------
    |           |           |           |
    |           |           |           |
    |           |           |           |
2   -------------------------------------
    |           |           |           |
    |           |           |           |
    |           |           |           |
3   -------------------------------------
    |           |           |           |
    |           |           |           |
    |           |           |           |
4   -------------------------------------

The following means that this item will span between row lines 1 and 2
    grid-row: 1 / 2;

The following means that this item will span between column lines 2 and 3
    grid-column: 2 / 4;
            OR
    grid-column: 2 / span 2; (this means span 2 cells starting from position 2)
            OR
    grid-column: 2 / -1; (the -1 means "all the way until the end". This is useful if you don't remember how many rows or columns you have)

    1           2           3           4
1   -------------------------------------
    |           |           |           |
    |           |    HERE   | AND HERE  |
    |           |           |           |
2   -------------------------------------
    |           |           |           |
    |           |           |           |
    |           |           |           |
3   -------------------------------------
    |           |           |           |
    |           |           |           |
    |           |           |           |
4   -------------------------------------


- You can have multiple grid items in the same cell. They overlap each other
- Applying a z-index to them will make them appear. This is a common technique.

- Grid items will get pushed down to an 'implicit' row if there is conflicting grid information.
- To fix that, you will need to explicitly set both grid row and column properties of the grid item to make it stay there.


=============================== NAMING GRID LINES ===============================

Instead of remembering and writing line numbers, we can name the row and column lines to make it easier for us:

- Imagine each [xxx] is a grid line. Read as "grid line" "grid space" "grid line" ... 

    grid-template-rows: [header-start] 100px [header-end main-content-start] 200px [main-content-end footer-start] 100px [footer-end];

- Naming grid lines in a repeat is different:
- Putting line names in a repeat will generate dyanmic grid line names

    grid-template-columns: repeat(3, 1fr) 
            WITH NAMES:
    grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 



grid-template-rows: [header-start] 100px [header-end main-content-start] 200px [main-content-end footer-start] 100px [footer-end];
grid-template-columns: repeat(3, [col-start] 1fr [col-end]) 

- Notice the dynamic col-start/col-end references
- You can use these exact names in the grid items!

                                col-start 1           col-end 1 OR col-start 2           col-end 2 OR col-start 3           col-end 3 OR col-start 4
                        header-start    ------------------------------------------------------------------------------------
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
    header-end OR main-content-start    ------------------------------------------------------------------------------------
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
    main-content-end OR footer-start    ------------------------------------------------------------------------------------
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                            footer-end  ------------------------------------------------------------------------------------ 




.header {
    grid-column: col-start 1 / col-end 3
}

                                col-start 1           col-end 1 OR col-start 2           col-end 2 OR col-start 3           col-end 3 OR col-start 4
                        header-start    ------------------------------------------------------------------------------------
                                        |                          |                           |                           |
                                        |          header          |          header           |           header          |
                                        |                          |                           |                           |
    header-end OR main-content-start    ------------------------------------------------------------------------------------
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
    main-content-end OR footer-start    ------------------------------------------------------------------------------------
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                                        |                          |                           |                           |
                            footer-end  ------------------------------------------------------------------------------------ 




=============================== NAMING GRID AREAS ===============================

This method is best for small simple layouts where the text representation of the grid is not too hard to manage

    .container {
        grid-template-areas: "head head head head"
                            "box box box side"
                            "main main main side"
                            "foot foot foot foot";
    }

    .header {
        grid-area: head;
    }


You can use the "." to represent an empty space

    .container {
        grid-template-areas: "head head head ."
                            "box box box side"
                            "main main . side"
                            "foot foot foot foot";
    }




=============================== EXPLICIT AND IMPLICIT GRIDS ===============================

The EXPLICIT grid is the grid that we define with our code.

The IMPLICIT grid is the grid that gets created to accomodate any content that doesn't fit into the space defined by the explicit grid.


By default if the items do not fit into the explicit grid, it will add them to a new row. 

    grid-auto-flow: row

This can be changed to a column direction. So items that don't fit into the explicit grid will be added to an implicit column

    grid-auto-flow: column

We can define how big these implicit rows and columns are by using:

    grid-auto-row: 100px;
    grid-auto-column: 200px;

Now whenever an item gets added to the implicit grid, it will have the height or width according to the above properties.


=============================== ALIGNING GRID ITEMS ===============================

.container {

    // vertically (default it is stretch)
    align-items: center / end / start / stretch

    // horizontally
    justify-items: center / end / start / stretch
}

// This overrides the container align and justify properties
.grid-item {
    align-self: center / end / start / stretch
    justify-self: center / end / start / stretch
}

=============================== ALIGNING THE GRID ITSELF (TRACKS) ===============================

- content refers to the entire grid itself

.container {
    justify-content: start / end, center / space-between / space-around / space-evenly
    align-content: start / end, center / space-between / space-around / space-evenly
}

=============================== RESPONSIVE GRID ===============================

When defining grid columns and rows you can use auto-fit and auto-fill to automatically generate the necessary number of rows or columns the grid needs

- auto-fill and auto-fit: Will automatically calculate how many rows or columns it needs to fill the entire grid by dividing the grid width and your specified width

auto-fill:
- In a 1000px width grid, this will produce exactly 10 columns because 10 columns of 100px will be 1000px
- This will produce empty cells if there are not enough grid items
    
    grid-template-column: repeat(auto-fill, 100px)

auto-fit:
- In a 1000px width grid, this will ALSO produce exactly 10 columns, however the empty cells are collapsed and have no width

    grid-template-columns: repeat(auto-fit, 100px)

You can use the following for a RESPONSIVE grid that automatically adjusts the number of columns or rows

    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr))
        - It will split the grid evenly with as many 1fr columns as it can, up until the width of each columns are at 100px
        - Then it will fit the grid with as many 100px columns as it can
        - Then as the available width shrinks, it will automatically remove a column to keep the 100px min width of the columns. It does so by pushing down a grid item to the next row
        - At first, it will try to place as many grid items onto 1 row, then it will move a grid item to a new row if the available width cannot satisfy the min of the minmax function


=============================== PROCESS ===============================

- Design your layout and decide how many rows and columns you need
- Create your rows
    - Sometimes you don't even need to define anything for you rows because by defualt it will grow to fit your content
- Create your columns
    - There is a common practice is to work with an x column grid.
    - Working with an x column grid will allow you to be more flexible with your layout
    - You will be able to start and end different sections at varying columns making your layout more dynamic
    - Make sure to give your grid lines names
    - Use the minmax function to enforce min spacings
- Start placing your grid items in the grid
    - You can start by giving a background color to each grid item and some padding to make it easier to see

*/
